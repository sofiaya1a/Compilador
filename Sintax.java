
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 16 21:47:53 COT 2024
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 16 21:47:53 COT 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\007\000\002\002\010\000\002\020\007" +
    "\000\002\020\011\000\002\020\010\000\002\020\010\000" +
    "\002\020\007\000\002\020\007\000\002\020\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\007\000\002\004\010\000\002\004\011\000\002\004\010" +
    "\000\002\004\005\000\002\004\011\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\006\011\000\002\006" +
    "\007\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\007\000\002\013\006\000\002" +
    "\013\007\000\002\013\006\000\002\013\007\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\011\000\002\013\010\000\002" +
    "\013\011\000\002\013\010\000\002\013\011\000\002\013" +
    "\006\000\002\007\015\000\002\007\013\000\002\010\011" +
    "\000\002\010\010\000\002\011\013\000\002\011\012\000" +
    "\002\012\011\000\002\012\010\000\002\014\012\000\002" +
    "\014\011\000\002\005\005\000\002\005\004\000\002\005" +
    "\004\000\002\015\002\000\002\016\005\000\002\016\005" +
    "\000\002\016\007\000\002\016\007\000\002\016\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\007\000\002" +
    "\017\007\000\002\017\005\000\002\021\012\000\002\022" +
    "\011\000\002\022\011\000\002\022\011\000\002\023\005" +
    "\000\002\023\005\000\002\023\010\000\002\023\010\000" +
    "\002\023\012\000\002\023\012\000\002\023\006\000\002" +
    "\023\006\000\002\023\010\000\002\023\010\000\002\023" +
    "\005\000\002\023\007\000\002\023\006\000\002\023\006" +
    "\000\002\023\011\000\002\023\011\000\002\023\013\000" +
    "\002\023\013\000\002\023\006\000\002\023\010\000\002" +
    "\023\007\000\002\023\007\000\002\023\011\000\002\023" +
    "\011\000\002\024\006\000\002\025\004\000\002\035\005" +
    "\000\002\035\007\000\002\035\006\000\002\035\007\000" +
    "\002\035\006\000\002\035\005\000\002\035\005\000\002" +
    "\035\004\000\002\035\006\000\002\035\005\000\002\035" +
    "\006\000\002\035\005\000\002\035\004\000\002\035\004" +
    "\000\002\035\006\000\002\035\010\000\002\035\007\000" +
    "\002\035\010\000\002\035\007\000\002\035\006\000\002" +
    "\035\006\000\002\027\011\000\002\027\013\000\002\030" +
    "\014\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\006\000\002\026\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\014\004\010\056\007\113\011\114\004\122" +
    "\005\001\002\000\004\115\u01d1\001\002\000\004\062\u01c6" +
    "\001\002\000\004\002\u01c5\001\002\000\004\050\u01bf\001" +
    "\002\000\004\056\023\001\002\000\004\034\013\001\002" +
    "\000\004\002\ufff6\001\002\000\004\062\014\001\002\000" +
    "\006\033\016\061\015\001\002\000\004\062\020\001\002" +
    "\000\014\004\010\056\007\113\011\114\004\122\005\001" +
    "\002\000\004\002\ufffc\001\002\000\004\033\021\001\002" +
    "\000\014\004\010\056\007\113\011\114\004\122\005\001" +
    "\002\000\004\002\ufffb\001\002\000\004\050\024\001\002" +
    "\000\004\051\025\001\002\000\004\052\026\001\002\000" +
    "\064\004\047\005\037\006\066\007\061\010\044\011\052" +
    "\012\030\013\071\014\035\016\076\021\033\050\053\053" +
    "\031\057\056\062\074\063\077\073\046\074\054\075\057" +
    "\100\073\105\045\106\062\117\067\120\075\121\042\001" +
    "\002\000\072\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\021\ufff0\050" +
    "\ufff0\053\ufff0\057\ufff0\062\ufff0\063\ufff0\073\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\104\ufff0\105\ufff0\106" +
    "\ufff0\117\ufff0\120\ufff0\121\ufff0\001\002\000\010\031\uff38" +
    "\032\uff38\062\uff38\001\002\000\004\002\ufffd\001\002\000" +
    "\072\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\016\uffda\021\uffda\050\uffda\053" +
    "\uffda\057\uffda\062\uffda\063\uffda\073\uffda\074\uffda\075\uffda" +
    "\076\uffda\077\uffda\100\uffda\104\uffda\105\uffda\106\uffda\117" +
    "\uffda\120\uffda\121\uffda\001\002\000\004\050\u01b1\001\002" +
    "\000\072\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\021\uffe8\050\uffe8" +
    "\053\uffe8\057\uffe8\062\uffe8\063\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\077\uffe8\100\uffe8\104\uffe8\105\uffe8\106\uffe8" +
    "\117\uffe8\120\uffe8\121\uffe8\001\002\000\010\031\uff36\032" +
    "\uff36\062\uff36\001\002\000\072\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\021\uffe2\050\uffe2\053\uffe2\057\uffe2\062\uffe2\063\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\104" +
    "\uffe2\105\uffe2\106\uffe2\117\uffe2\120\uffe2\121\uffe2\001\002" +
    "\000\010\031\uff39\032\uff39\062\uff39\001\002\000\064\004" +
    "\047\005\037\006\066\007\061\010\044\011\052\012\030" +
    "\013\071\014\035\016\076\021\033\050\053\053\u01b0\057" +
    "\056\062\074\063\077\073\046\074\054\075\057\100\073" +
    "\105\045\106\062\117\067\120\075\121\042\001\002\000" +
    "\072\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\016\uffea\021\uffea\050\uffea\053" +
    "\uffea\057\uffea\062\uffea\063\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\077\uffea\100\uffea\104\uffea\105\uffea\106\uffea\117" +
    "\uffea\120\uffea\121\uffea\001\002\000\004\042\u018a\001\002" +
    "\000\072\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\016\uffec\021\uffec\050\uffec" +
    "\053\uffec\057\uffec\062\uffec\063\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\077\uffec\100\uffec\104\uffec\105\uffec\106\uffec" +
    "\117\uffec\120\uffec\121\uffec\001\002\000\010\031\uff3a\032" +
    "\uff3a\062\uff3a\001\002\000\020\015\254\020\u017c\062\u017e" +
    "\063\u017b\064\250\065\251\110\u017f\001\002\000\004\050" +
    "\u0174\001\002\000\010\031\uff3c\032\uff3c\062\uff3c\001\002" +
    "\000\072\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6\050\uffe6" +
    "\053\uffe6\057\uffe6\062\uffe6\063\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\104\uffe6\105\uffe6\106\uffe6" +
    "\117\uffe6\120\uffe6\121\uffe6\001\002\000\072\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\016\ufff2\021\ufff2\050\ufff2\053\ufff2\057\ufff2\062" +
    "\ufff2\063\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\104\ufff2\105\ufff2\106\ufff2\117\ufff2\120\ufff2\121" +
    "\ufff2\001\002\000\010\031\uff37\032\uff37\062\uff37\001\002" +
    "\000\012\015\254\062\253\064\250\065\251\001\002\000" +
    "\004\050\u0154\001\002\000\010\031\u0145\032\u0147\062\u0146" +
    "\001\002\000\004\050\u0138\001\002\000\004\050\354\001" +
    "\002\000\072\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\021\uffe0\050" +
    "\uffe0\053\uffe0\057\uffe0\062\uffe0\063\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\100\uffe0\104\uffe0\105\uffe0\106" +
    "\uffe0\117\uffe0\120\uffe0\121\uffe0\001\002\000\004\062\344" +
    "\001\002\000\004\052\242\001\002\000\072\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\016\uffdc\021\uffdc\050\uffdc\053\uffdc\057\uffdc\062" +
    "\uffdc\063\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc" +
    "\100\uffdc\104\uffdc\105\uffdc\106\uffdc\117\uffdc\120\uffdc\121" +
    "\uffdc\001\002\000\072\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\021" +
    "\uffe4\050\uffe4\053\uffe4\057\uffe4\062\uffe4\063\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\104\uffe4\105" +
    "\uffe4\106\uffe4\117\uffe4\120\uffe4\121\uffe4\001\002\000\072" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\016\ufff4\021\ufff4\050\ufff4\053\ufff4" +
    "\057\ufff4\062\ufff4\063\ufff4\073\ufff4\074\ufff4\075\ufff4\076" +
    "\ufff4\077\ufff4\100\ufff4\104\ufff4\105\ufff4\106\ufff4\117\ufff4" +
    "\120\ufff4\121\ufff4\001\002\000\010\031\uff3b\032\uff3b\062" +
    "\uff3b\001\002\000\004\050\231\001\002\000\072\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\016\uffde\021\uffde\050\uffde\053\uffde\057\uffde" +
    "\062\uffde\063\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077" +
    "\uffde\100\uffde\104\uffde\105\uffde\106\uffde\117\uffde\120\uffde" +
    "\121\uffde\001\002\000\004\062\220\001\002\000\072\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\016\uffee\021\uffee\050\uffee\053\uffee\057" +
    "\uffee\062\uffee\063\uffee\073\uffee\074\uffee\075\uffee\076\uffee" +
    "\077\uffee\100\uffee\104\uffee\105\uffee\106\uffee\117\uffee\120" +
    "\uffee\121\uffee\001\002\000\004\052\173\001\002\000\030" +
    "\024\107\025\112\026\102\027\106\030\111\043\124\044" +
    "\104\045\101\046\100\047\105\111\113\001\002\000\004" +
    "\041\121\001\002\000\004\062\115\001\002\000\030\024" +
    "\107\025\112\026\102\027\106\030\111\043\103\044\104" +
    "\045\101\046\100\047\105\111\113\001\002\000\006\062" +
    "\uff2c\063\uff2c\001\002\000\006\062\uff2d\063\uff2d\001\002" +
    "\000\006\062\uff33\063\uff33\001\002\000\004\063\uff2f\001" +
    "\002\000\006\062\uff2e\063\uff2e\001\002\000\006\062\uff2b" +
    "\063\uff2b\001\002\000\006\062\uff32\063\uff32\001\002\000" +
    "\006\062\uff35\063\uff35\001\002\000\004\063\114\001\002" +
    "\000\006\062\uff30\063\uff30\001\002\000\006\062\uff34\063" +
    "\uff34\001\002\000\006\062\uff31\063\uff31\001\002\000\112" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\016\uff99\021\uff99\042\uff99\050\uff99" +
    "\051\uff99\053\uff99\057\uff99\060\uff99\062\uff99\063\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\104\uff99\105\uff99\106" +
    "\uff99\117\uff99\120\uff99\121\uff99\001\002\000\004\023\116" +
    "\001\002\000\006\064\117\065\120\001\002\000\074\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\021\uffd2\050\uffd2\051\uffd2\053" +
    "\uffd2\057\uffd2\062\uffd2\063\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\104\uffd2\105\uffd2\106\uffd2\117" +
    "\uffd2\120\uffd2\121\uffd2\001\002\000\074\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\016\uffd1\021\uffd1\050\uffd1\051\uffd1\053\uffd1\057\uffd1" +
    "\062\uffd1\063\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\100\uffd1\104\uffd1\105\uffd1\106\uffd1\117\uffd1\120\uffd1" +
    "\121\uffd1\001\002\000\004\062\122\001\002\000\004\060" +
    "\123\001\002\000\072\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\016\uff7c\021" +
    "\uff7c\050\uff7c\053\uff7c\057\uff7c\062\uff7c\063\uff7c\073\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\104\uff7c\105" +
    "\uff7c\106\uff7c\117\uff7c\120\uff7c\121\uff7c\001\002\000\012" +
    "\020\130\062\uff2f\063\uff2f\110\131\001\002\000\006\062" +
    "\127\063\126\001\002\000\112\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016" +
    "\uff9c\021\uff9c\042\uff9c\050\uff9c\051\uff9c\053\uff9c\057\uff9c" +
    "\060\uff9c\062\uff9c\063\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\100\uff9c\104\uff9c\105\uff9c\106\uff9c\117\uff9c\120\uff9c\121" +
    "\uff9c\001\002\000\112\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d\021" +
    "\uff9d\042\uff9d\050\uff9d\051\uff9d\053\uff9d\057\uff9d\060\uff9d" +
    "\062\uff9d\063\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\117\uff9d\120\uff9d\121\uff9d\001" +
    "\002\000\036\017\142\024\143\025\147\026\134\027\137" +
    "\050\140\051\136\060\146\061\135\062\144\063\145\111" +
    "\150\112\141\126\133\001\002\000\036\017\142\024\143" +
    "\025\147\026\134\027\137\050\140\051\136\060\146\061" +
    "\135\062\144\063\145\111\150\112\141\126\133\001\002" +
    "\000\036\017\160\024\161\025\165\026\152\027\155\051" +
    "\154\060\163\061\153\062\162\063\164\110\156\111\166" +
    "\112\157\126\151\001\002\000\042\017\uff60\020\uff60\024" +
    "\uff60\025\uff60\026\uff60\027\uff60\050\uff60\051\uff60\060\uff60" +
    "\061\uff60\062\uff60\063\uff60\110\uff60\111\uff60\112\uff60\126" +
    "\uff60\001\002\000\042\017\uff5a\020\uff5a\024\uff5a\025\uff5a" +
    "\026\uff5a\027\uff5a\050\uff5a\051\uff5a\060\uff5a\061\uff5a\062" +
    "\uff5a\063\uff5a\110\uff5a\111\uff5a\112\uff5a\126\uff5a\001\002" +
    "\000\042\017\uff5e\020\uff5e\024\uff5e\025\uff5e\026\uff5e\027" +
    "\uff5e\050\uff5e\051\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e" +
    "\110\uff5e\111\uff5e\112\uff5e\126\uff5e\001\002\000\042\017" +
    "\uff55\020\uff55\024\uff55\025\uff55\026\uff55\027\uff55\050\uff55" +
    "\051\uff55\060\uff55\061\uff55\062\uff55\063\uff55\110\uff55\111" +
    "\uff55\112\uff55\126\uff55\001\002\000\042\017\uff59\020\uff59" +
    "\024\uff59\025\uff59\026\uff59\027\uff59\050\uff59\051\uff59\060" +
    "\uff59\061\uff59\062\uff59\063\uff59\110\uff59\111\uff59\112\uff59" +
    "\126\uff59\001\002\000\042\017\uff56\020\uff56\024\uff56\025" +
    "\uff56\026\uff56\027\uff56\050\uff56\051\uff56\060\uff56\061\uff56" +
    "\062\uff56\063\uff56\110\uff56\111\uff56\112\uff56\126\uff56\001" +
    "\002\000\042\017\uff5f\020\uff5f\024\uff5f\025\uff5f\026\uff5f" +
    "\027\uff5f\050\uff5f\051\uff5f\060\uff5f\061\uff5f\062\uff5f\063" +
    "\uff5f\110\uff5f\111\uff5f\112\uff5f\126\uff5f\001\002\000\042" +
    "\017\uff57\020\uff57\024\uff57\025\uff57\026\uff57\027\uff57\050" +
    "\uff57\051\uff57\060\uff57\061\uff57\062\uff57\063\uff57\110\uff57" +
    "\111\uff57\112\uff57\126\uff57\001\002\000\042\017\uff5b\020" +
    "\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\050\uff5b\051\uff5b" +
    "\060\uff5b\061\uff5b\062\uff5b\063\uff5b\110\uff5b\111\uff5b\112" +
    "\uff5b\126\uff5b\001\002\000\042\017\uff62\020\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\050\uff62\051\uff62\060\uff62\061" +
    "\uff62\062\uff62\063\uff62\110\uff62\111\uff62\112\uff62\126\uff62" +
    "\001\002\000\042\017\uff61\020\uff61\024\uff61\025\uff61\026" +
    "\uff61\027\uff61\050\uff61\051\uff61\060\uff61\061\uff61\062\uff61" +
    "\063\uff61\110\uff61\111\uff61\112\uff61\126\uff61\001\002\000" +
    "\042\017\uff5d\020\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\050\uff5d\051\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\110" +
    "\uff5d\111\uff5d\112\uff5d\126\uff5d\001\002\000\042\017\uff5c" +
    "\020\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\050\uff5c\051" +
    "\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\110\uff5c\111\uff5c" +
    "\112\uff5c\126\uff5c\001\002\000\042\017\uff58\020\uff58\024" +
    "\uff58\025\uff58\026\uff58\027\uff58\050\uff58\051\uff58\060\uff58" +
    "\061\uff58\062\uff58\063\uff58\110\uff58\111\uff58\112\uff58\126" +
    "\uff58\001\002\000\042\017\uff52\020\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\050\uff52\051\uff52\060\uff52\061\uff52\062" +
    "\uff52\063\uff52\110\uff52\111\uff52\112\uff52\126\uff52\001\002" +
    "\000\042\017\uff4c\020\uff4c\024\uff4c\025\uff4c\026\uff4c\027" +
    "\uff4c\050\uff4c\051\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c" +
    "\110\uff4c\111\uff4c\112\uff4c\126\uff4c\001\002\000\042\017" +
    "\uff50\020\uff50\024\uff50\025\uff50\026\uff50\027\uff50\050\uff50" +
    "\051\uff50\060\uff50\061\uff50\062\uff50\063\uff50\110\uff50\111" +
    "\uff50\112\uff50\126\uff50\001\002\000\042\017\uff48\020\uff48" +
    "\024\uff48\025\uff48\026\uff48\027\uff48\050\uff48\051\uff48\060" +
    "\uff48\061\uff48\062\uff48\063\uff48\110\uff48\111\uff48\112\uff48" +
    "\126\uff48\001\002\000\042\017\uff4b\020\uff4b\024\uff4b\025" +
    "\uff4b\026\uff4b\027\uff4b\050\uff4b\051\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\110\uff4b\111\uff4b\112\uff4b\126\uff4b\001" +
    "\002\000\112\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\021\uff9a\042" +
    "\uff9a\050\uff9a\051\uff9a\053\uff9a\057\uff9a\060\uff9a\062\uff9a" +
    "\063\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\104\uff9a" +
    "\105\uff9a\106\uff9a\117\uff9a\120\uff9a\121\uff9a\001\002\000" +
    "\042\017\uff51\020\uff51\024\uff51\025\uff51\026\uff51\027\uff51" +
    "\050\uff51\051\uff51\060\uff51\061\uff51\062\uff51\063\uff51\110" +
    "\uff51\111\uff51\112\uff51\126\uff51\001\002\000\036\017\142" +
    "\024\143\025\147\026\134\027\137\050\140\051\136\060" +
    "\146\061\135\062\144\063\145\111\150\112\141\126\133" +
    "\001\002\000\042\017\uff4d\020\uff4d\024\uff4d\025\uff4d\026" +
    "\uff4d\027\uff4d\050\uff4d\051\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\110\uff4d\111\uff4d\112\uff4d\126\uff4d\001\002\000" +
    "\042\017\uff54\020\uff54\024\uff54\025\uff54\026\uff54\027\uff54" +
    "\050\uff54\051\uff54\060\uff54\061\uff54\062\uff54\063\uff54\110" +
    "\uff54\111\uff54\112\uff54\126\uff54\001\002\000\042\017\uff4f" +
    "\020\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\050\uff4f\051" +
    "\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\110\uff4f\111\uff4f" +
    "\112\uff4f\126\uff4f\001\002\000\042\017\uff53\020\uff53\024" +
    "\uff53\025\uff53\026\uff53\027\uff53\050\uff53\051\uff53\060\uff53" +
    "\061\uff53\062\uff53\063\uff53\110\uff53\111\uff53\112\uff53\126" +
    "\uff53\001\002\000\042\017\uff4e\020\uff4e\024\uff4e\025\uff4e" +
    "\026\uff4e\027\uff4e\050\uff4e\051\uff4e\060\uff4e\061\uff4e\062" +
    "\uff4e\063\uff4e\110\uff4e\111\uff4e\112\uff4e\126\uff4e\001\002" +
    "\000\042\017\uff4a\020\uff4a\024\uff4a\025\uff4a\026\uff4a\027" +
    "\uff4a\050\uff4a\051\uff4a\060\uff4a\061\uff4a\062\uff4a\063\uff4a" +
    "\110\uff4a\111\uff4a\112\uff4a\126\uff4a\001\002\000\036\017" +
    "\160\024\161\025\165\026\152\027\155\050\170\051\154" +
    "\060\163\061\153\062\162\063\164\111\166\112\157\126" +
    "\151\001\002\000\042\017\uff49\020\uff49\024\uff49\025\uff49" +
    "\026\uff49\027\uff49\050\uff49\051\uff49\060\uff49\061\uff49\062" +
    "\uff49\063\uff49\110\uff49\111\uff49\112\uff49\126\uff49\001\002" +
    "\000\036\017\160\020\172\024\161\025\165\026\152\027" +
    "\155\051\154\060\163\061\153\062\162\063\164\111\166" +
    "\112\157\126\151\001\002\000\112\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\016\uff9b\021\uff9b\042\uff9b\050\uff9b\051\uff9b\053\uff9b\057" +
    "\uff9b\060\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\104\uff9b\105\uff9b\106\uff9b\117\uff9b\120\uff9b" +
    "\121\uff9b\001\002\000\062\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\057\056\062\074\063\077\073\046\074" +
    "\054\075\057\100\073\105\045\106\062\117\067\120\075" +
    "\121\042\001\002\000\064\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\053\176\057\056\062\074\063\077\073" +
    "\046\074\054\075\057\100\073\105\045\106\062\117\067" +
    "\120\075\121\042\001\002\000\072\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\016\ufff1\021\ufff1\050\ufff1\053\ufff1\057\ufff1\062\ufff1\063" +
    "\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\117\ufff1\120\ufff1\121\ufff1\001" +
    "\002\000\004\101\214\001\002\000\072\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\021\uffdb\050\uffdb\053\uffdb\057\uffdb\062\uffdb" +
    "\063\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\104\uffdb\105\uffdb\106\uffdb\117\uffdb\120\uffdb\121\uffdb" +
    "\001\002\000\072\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\021\uffe9" +
    "\050\uffe9\053\uffe9\057\uffe9\062\uffe9\063\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\117\uffe9\120\uffe9\121\uffe9\001\002\000\072\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\021\uffe3\050\uffe3\053\uffe3\057" +
    "\uffe3\062\uffe3\063\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\104\uffe3\105\uffe3\106\uffe3\117\uffe3\120" +
    "\uffe3\121\uffe3\001\002\000\072\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\021\uffeb\050\uffeb\053\uffeb\057\uffeb\062\uffeb\063\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\117\uffeb\120\uffeb\121\uffeb\001\002" +
    "\000\072\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\016\uffed\021\uffed\050\uffed" +
    "\053\uffed\057\uffed\062\uffed\063\uffed\073\uffed\074\uffed\075" +
    "\uffed\076\uffed\077\uffed\100\uffed\104\uffed\105\uffed\106\uffed" +
    "\117\uffed\120\uffed\121\uffed\001\002\000\072\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\021\uffe7\050\uffe7\053\uffe7\057\uffe7\062" +
    "\uffe7\063\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\104\uffe7\105\uffe7\106\uffe7\117\uffe7\120\uffe7\121" +
    "\uffe7\001\002\000\072\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\021" +
    "\ufff3\050\ufff3\053\ufff3\057\ufff3\062\ufff3\063\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\104\ufff3\105" +
    "\ufff3\106\ufff3\117\ufff3\120\ufff3\121\ufff3\001\002\000\072" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1\050\uffe1\053\uffe1" +
    "\057\uffe1\062\uffe1\063\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\104\uffe1\105\uffe1\106\uffe1\117\uffe1" +
    "\120\uffe1\121\uffe1\001\002\000\072\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\021\uffdd\050\uffdd\053\uffdd\057\uffdd\062\uffdd\063" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\104\uffdd\105\uffdd\106\uffdd\117\uffdd\120\uffdd\121\uffdd\001" +
    "\002\000\072\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\021\uffe5\050" +
    "\uffe5\053\uffe5\057\uffe5\062\uffe5\063\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\076\uffe5\077\uffe5\100\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\117\uffe5\120\uffe5\121\uffe5\001\002\000\072\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\021\ufff5\050\ufff5\053\ufff5\057\ufff5" +
    "\062\ufff5\063\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\104\ufff5\105\ufff5\106\ufff5\117\ufff5\120\ufff5" +
    "\121\ufff5\001\002\000\072\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\021\uffdf\050\uffdf\053\uffdf\057\uffdf\062\uffdf\063\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\104\uffdf" +
    "\105\uffdf\106\uffdf\117\uffdf\120\uffdf\121\uffdf\001\002\000" +
    "\072\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef\050\uffef\053" +
    "\uffef\057\uffef\062\uffef\063\uffef\073\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\100\uffef\104\uffef\105\uffef\106\uffef\117" +
    "\uffef\120\uffef\121\uffef\001\002\000\004\052\215\001\002" +
    "\000\062\004\047\005\037\006\066\007\061\010\044\011" +
    "\052\012\030\013\071\014\035\016\076\021\033\050\053" +
    "\057\056\062\074\063\077\073\046\074\054\075\057\100" +
    "\073\105\045\106\062\117\067\120\075\121\042\001\002" +
    "\000\064\004\047\005\037\006\066\007\061\010\044\011" +
    "\052\012\030\013\071\014\035\016\076\021\033\050\053" +
    "\053\217\057\056\062\074\063\077\073\046\074\054\075" +
    "\057\100\073\105\045\106\062\117\067\120\075\121\042" +
    "\001\002\000\072\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016\uff98\021\uff98" +
    "\050\uff98\053\uff98\057\uff98\062\uff98\063\uff98\073\uff98\074" +
    "\uff98\075\uff98\076\uff98\077\uff98\100\uff98\104\uff98\105\uff98" +
    "\106\uff98\117\uff98\120\uff98\121\uff98\001\002\000\006\023" +
    "\222\060\221\001\002\000\074\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\021\uffd4\050\uffd4\051\uffd4\053\uffd4\057\uffd4\062\uffd4" +
    "\063\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\117\uffd4\120\uffd4\121\uffd4" +
    "\001\002\000\004\020\223\001\002\000\040\017\142\020" +
    "\225\024\143\025\147\026\134\027\137\050\140\051\136" +
    "\060\146\061\135\062\144\063\145\111\150\112\141\126" +
    "\133\001\002\000\036\017\160\020\227\024\161\025\165" +
    "\026\152\027\155\051\154\060\163\061\153\062\162\063" +
    "\164\111\166\112\157\126\151\001\002\000\004\060\226" +
    "\001\002\000\074\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\021\uffd5" +
    "\050\uffd5\051\uffd5\053\uffd5\057\uffd5\062\uffd5\063\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\104\uffd5" +
    "\105\uffd5\106\uffd5\117\uffd5\120\uffd5\121\uffd5\001\002\000" +
    "\004\060\230\001\002\000\074\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\016" +
    "\uffd3\021\uffd3\050\uffd3\051\uffd3\053\uffd3\057\uffd3\062\uffd3" +
    "\063\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\104\uffd3\105\uffd3\106\uffd3\117\uffd3\120\uffd3\121\uffd3" +
    "\001\002\000\004\020\232\001\002\000\036\017\142\024" +
    "\143\025\147\026\134\027\137\050\140\051\136\060\146" +
    "\061\135\062\144\063\145\111\150\112\141\126\133\001" +
    "\002\000\036\017\160\020\234\024\161\025\165\026\152" +
    "\027\155\051\154\060\163\061\153\062\162\063\164\111" +
    "\166\112\157\126\151\001\002\000\004\112\235\001\002" +
    "\000\004\071\236\001\002\000\004\062\237\001\002\000" +
    "\004\051\240\001\002\000\004\060\241\001\002\000\072" +
    "\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012" +
    "\uff63\013\uff63\014\uff63\016\uff63\021\uff63\050\uff63\053\uff63" +
    "\057\uff63\062\uff63\063\uff63\073\uff63\074\uff63\075\uff63\076" +
    "\uff63\077\uff63\100\uff63\104\uff63\105\uff63\106\uff63\117\uff63" +
    "\120\uff63\121\uff63\001\002\000\064\004\047\005\037\006" +
    "\066\007\061\010\044\011\052\012\030\013\071\014\035" +
    "\016\076\021\033\050\053\053\243\057\056\062\074\063" +
    "\077\073\046\074\054\075\057\100\073\105\045\106\062" +
    "\117\067\120\075\121\042\001\002\000\004\073\337\001" +
    "\002\000\064\004\047\005\037\006\066\007\061\010\044" +
    "\011\052\012\030\013\071\014\035\016\076\021\033\050" +
    "\053\053\245\057\056\062\074\063\077\073\046\074\054" +
    "\075\057\100\073\105\045\106\062\117\067\120\075\121" +
    "\042\001\002\000\004\073\246\001\002\000\004\050\247" +
    "\001\002\000\012\015\254\062\253\064\250\065\251\001" +
    "\002\000\020\051\uffca\060\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\001\002\000\020\051\uffc9\060\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\001\002\000\016" +
    "\051\311\066\304\067\310\070\303\071\305\072\306\001" +
    "\002\000\022\033\261\034\264\035\257\036\256\037\255" +
    "\040\263\062\074\063\077\001\002\000\020\051\uffc8\060" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\001\002" +
    "\000\016\020\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\110" +
    "\uff3e\001\002\000\016\020\uff41\062\uff41\063\uff41\064\uff41" +
    "\065\uff41\110\uff41\001\002\000\016\020\uff42\062\uff42\063" +
    "\uff42\064\uff42\065\uff42\110\uff42\001\002\000\020\051\uffbe" +
    "\060\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\001" +
    "\002\000\016\020\uff40\062\uff40\063\uff40\064\uff40\065\uff40" +
    "\110\uff40\001\002\000\016\020\267\062\271\063\265\064" +
    "\266\065\270\110\272\001\002\000\016\020\uff3d\062\uff3d" +
    "\063\uff3d\064\uff3d\065\uff3d\110\uff3d\001\002\000\016\020" +
    "\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\110\uff3f\001\002" +
    "\000\022\051\uffc5\060\uffc5\061\301\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\001\002\000\020\051\uffc7\060\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\001\002\000" +
    "\040\017\142\020\277\024\143\025\147\026\134\027\137" +
    "\050\140\051\136\060\146\061\135\062\144\063\145\111" +
    "\150\112\141\126\133\001\002\000\020\051\uffc6\060\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\001\002\000" +
    "\020\051\uffc4\060\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\001\002\000\040\017\142\024\143\025\147\026" +
    "\134\027\137\050\140\051\136\060\146\061\135\062\144" +
    "\063\145\110\274\111\150\112\141\126\133\001\002\000" +
    "\036\017\160\024\161\025\165\026\152\027\155\051\154" +
    "\060\163\061\153\062\162\063\164\110\275\111\166\112" +
    "\157\126\151\001\002\000\020\051\uffc0\060\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\001\002\000\020\051" +
    "\uffbf\060\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\001\002\000\036\017\160\020\300\024\161\025\165\026" +
    "\152\027\155\051\154\060\163\061\153\062\162\063\164" +
    "\111\166\112\157\126\151\001\002\000\020\051\uffc2\060" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\001\002" +
    "\000\020\051\uffc1\060\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\001\002\000\004\063\302\001\002\000\020" +
    "\051\uffc3\060\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\001\002\000\012\015\uff45\062\uff45\064\uff45\065\uff45" +
    "\001\002\000\012\015\uff47\062\uff47\064\uff47\065\uff47\001" +
    "\002\000\012\015\uff44\062\uff44\064\uff44\065\uff44\001\002" +
    "\000\012\015\uff43\062\uff43\064\uff43\065\uff43\001\002\000" +
    "\012\015\316\062\315\064\313\065\314\001\002\000\012" +
    "\015\uff46\062\uff46\064\uff46\065\uff46\001\002\000\004\060" +
    "\312\001\002\000\072\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\021" +
    "\uffac\050\uffac\053\uffac\057\uffac\062\uffac\063\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\104\uffac\105" +
    "\uffac\106\uffac\117\uffac\120\uffac\121\uffac\001\002\000\020" +
    "\051\uffbd\060\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\001\002\000\020\051\uffbc\060\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\001\002\000\022\033\261\034" +
    "\264\035\257\036\256\037\255\040\263\062\074\063\077" +
    "\001\002\000\020\051\uffbb\060\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\001\002\000\020\051\uffb1\060\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\001\002\000" +
    "\016\020\323\062\325\063\321\064\322\065\324\110\326" +
    "\001\002\000\022\051\uffb8\060\uffb8\061\335\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\001\002\000\020\051\uffba" +
    "\060\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\001" +
    "\002\000\040\017\142\020\333\024\143\025\147\026\134" +
    "\027\137\050\140\051\136\060\146\061\135\062\144\063" +
    "\145\111\150\112\141\126\133\001\002\000\020\051\uffb9" +
    "\060\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\001" +
    "\002\000\020\051\uffb7\060\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\001\002\000\040\017\142\024\143\025" +
    "\147\026\134\027\137\050\140\051\136\060\146\061\135" +
    "\062\144\063\145\110\330\111\150\112\141\126\133\001" +
    "\002\000\036\017\160\024\161\025\165\026\152\027\155" +
    "\051\154\060\163\061\153\062\162\063\164\110\331\111" +
    "\166\112\157\126\151\001\002\000\020\051\uffb3\060\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\001\002\000" +
    "\020\051\uffb2\060\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\072\uffb2\001\002\000\036\017\160\020\334\024\161\025" +
    "\165\026\152\027\155\051\154\060\163\061\153\062\162" +
    "\063\164\111\166\112\157\126\151\001\002\000\020\051" +
    "\uffb5\060\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\001\002\000\020\051\uffb4\060\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\001\002\000\004\063\336\001\002" +
    "\000\020\051\uffb6\060\uffb6\066\uffb6\067\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\001\002\000\004\050\340\001\002\000\012" +
    "\015\254\062\253\064\250\065\251\001\002\000\016\051" +
    "\342\066\304\067\310\070\303\071\305\072\306\001\002" +
    "\000\004\060\343\001\002\000\072\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\016\uffab\021\uffab\050\uffab\053\uffab\057\uffab\062\uffab\063" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\104\uffab\105\uffab\106\uffab\117\uffab\120\uffab\121\uffab\001" +
    "\002\000\004\023\345\001\002\000\004\110\346\001\002" +
    "\000\040\017\142\024\143\025\147\026\134\027\137\050" +
    "\140\051\136\060\146\061\135\062\144\063\145\110\350" +
    "\111\150\112\141\126\133\001\002\000\036\017\160\024" +
    "\161\025\165\026\152\027\155\051\154\060\163\061\153" +
    "\062\162\063\164\110\352\111\166\112\157\126\151\001" +
    "\002\000\004\060\351\001\002\000\074\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\021\uffd7\050\uffd7\051\uffd7\053\uffd7\057\uffd7" +
    "\062\uffd7\063\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\104\uffd7\105\uffd7\106\uffd7\117\uffd7\120\uffd7" +
    "\121\uffd7\001\002\000\004\060\353\001\002\000\074\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\021\uffd6\050\uffd6\051\uffd6\053" +
    "\uffd6\057\uffd6\062\uffd6\063\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\100\uffd6\104\uffd6\105\uffd6\106\uffd6\117" +
    "\uffd6\120\uffd6\121\uffd6\001\002\000\032\004\047\005\037" +
    "\006\066\007\061\010\044\011\052\012\030\013\071\014" +
    "\035\016\076\062\356\063\357\001\002\000\004\051\u0134" +
    "\001\002\000\004\051\u0130\001\002\000\004\051\360\001" +
    "\002\000\004\052\361\001\002\000\006\076\363\104\362" +
    "\001\002\000\004\126\u012c\001\002\000\012\020\u0115\062" +
    "\u0116\063\u0114\110\u0117\001\002\000\010\053\365\076\367" +
    "\104\366\001\002\000\072\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\016\uff96" +
    "\021\uff96\050\uff96\053\uff96\057\uff96\062\uff96\063\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\104\uff96" +
    "\105\uff96\106\uff96\117\uff96\120\uff96\121\uff96\001\002\000" +
    "\004\126\u0110\001\002\000\012\020\371\062\372\063\370" +
    "\110\373\001\002\000\004\126\u010c\001\002\000\004\062" +
    "\u0106\001\002\000\004\126\u0102\001\002\000\004\062\374" +
    "\001\002\000\004\110\375\001\002\000\004\126\376\001" +
    "\002\000\062\004\047\005\037\006\066\007\061\010\044" +
    "\011\052\012\030\013\071\014\035\016\076\021\033\050" +
    "\053\057\056\062\074\063\077\073\046\074\054\075\057" +
    "\100\073\105\045\106\062\117\067\120\075\121\042\001" +
    "\002\000\072\004\047\005\037\006\066\007\061\010\044" +
    "\011\052\012\030\013\071\014\035\016\076\021\033\050" +
    "\053\053\uff7d\057\056\062\074\063\077\073\046\074\054" +
    "\075\057\076\uff7d\077\u0100\100\073\104\uff7d\105\045\106" +
    "\062\117\067\120\075\121\042\001\002\000\004\060\u0101" +
    "\001\002\000\010\053\uff83\076\uff83\104\uff83\001\002\000" +
    "\070\004\047\005\037\006\066\007\061\010\044\011\052" +
    "\012\030\013\071\014\035\016\076\021\033\050\053\053" +
    "\uff87\057\056\062\074\063\077\073\046\074\054\075\057" +
    "\076\uff87\100\073\104\uff87\105\045\106\062\117\067\120" +
    "\075\121\042\001\002\000\072\004\047\005\037\006\066" +
    "\007\061\010\044\011\052\012\030\013\071\014\035\016" +
    "\076\021\033\050\053\053\uff7f\057\056\062\074\063\077" +
    "\073\046\074\054\075\057\076\uff7f\077\u0104\100\073\104" +
    "\uff7f\105\045\106\062\117\067\120\075\121\042\001\002" +
    "\000\004\060\u0105\001\002\000\010\053\uff85\076\uff85\104" +
    "\uff85\001\002\000\004\020\u0107\001\002\000\004\126\u0108" +
    "\001\002\000\062\004\047\005\037\006\066\007\061\010" +
    "\044\011\052\012\030\013\071\014\035\016\076\021\033" +
    "\050\053\057\056\062\074\063\077\073\046\074\054\075" +
    "\057\100\073\105\045\106\062\117\067\120\075\121\042" +
    "\001\002\000\072\004\047\005\037\006\066\007\061\010" +
    "\044\011\052\012\030\013\071\014\035\016\076\021\033" +
    "\050\053\053\uff7e\057\056\062\074\063\077\073\046\074" +
    "\054\075\057\076\uff7e\077\u010a\100\073\104\uff7e\105\045" +
    "\106\062\117\067\120\075\121\042\001\002\000\004\060" +
    "\u010b\001\002\000\010\053\uff84\076\uff84\104\uff84\001\002" +
    "\000\070\004\047\005\037\006\066\007\061\010\044\011" +
    "\052\012\030\013\071\014\035\016\076\021\033\050\053" +
    "\053\uff88\057\056\062\074\063\077\073\046\074\054\075" +
    "\057\076\uff88\100\073\104\uff88\105\045\106\062\117\067" +
    "\120\075\121\042\001\002\000\072\004\047\005\037\006" +
    "\066\007\061\010\044\011\052\012\030\013\071\014\035" +
    "\016\076\021\033\050\053\053\uff80\057\056\062\074\063" +
    "\077\073\046\074\054\075\057\076\uff80\077\u010e\100\073" +
    "\104\uff80\105\045\106\062\117\067\120\075\121\042\001" +
    "\002\000\004\060\u010f\001\002\000\010\053\uff86\076\uff86" +
    "\104\uff86\001\002\000\062\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\057\056\062\074\063\077\073\046\074" +
    "\054\075\057\100\073\105\045\106\062\117\067\120\075" +
    "\121\042\001\002\000\072\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\053\uff82\057\056\062\074\063\077\073" +
    "\046\074\054\075\057\076\uff82\077\u0112\100\073\104\uff82" +
    "\105\045\106\062\117\067\120\075\121\042\001\002\000" +
    "\004\060\u0113\001\002\000\010\053\uff81\076\uff81\104\uff81" +
    "\001\002\000\004\126\u0128\001\002\000\004\062\u0122\001" +
    "\002\000\004\126\u011e\001\002\000\004\062\u0118\001\002" +
    "\000\004\110\u0119\001\002\000\004\126\u011a\001\002\000" +
    "\062\004\047\005\037\006\066\007\061\010\044\011\052" +
    "\012\030\013\071\014\035\016\076\021\033\050\053\057" +
    "\056\062\074\063\077\073\046\074\054\075\057\100\073" +
    "\105\045\106\062\117\067\120\075\121\042\001\002\000" +
    "\072\004\047\005\037\006\066\007\061\010\044\011\052" +
    "\012\030\013\071\014\035\016\076\021\033\050\053\053" +
    "\uff8b\057\056\062\074\063\077\073\046\074\054\075\057" +
    "\076\uff8b\077\u011c\100\073\104\uff8b\105\045\106\062\117" +
    "\067\120\075\121\042\001\002\000\004\060\u011d\001\002" +
    "\000\010\053\uff8f\076\uff8f\104\uff8f\001\002\000\070\004" +
    "\047\005\037\006\066\007\061\010\044\011\052\012\030" +
    "\013\071\014\035\016\076\021\033\050\053\053\uff93\057" +
    "\056\062\074\063\077\073\046\074\054\075\057\076\uff93" +
    "\100\073\104\uff93\105\045\106\062\117\067\120\075\121" +
    "\042\001\002\000\072\004\047\005\037\006\066\007\061" +
    "\010\044\011\052\012\030\013\071\014\035\016\076\021" +
    "\033\050\053\053\uff8d\057\056\062\074\063\077\073\046" +
    "\074\054\075\057\076\uff8d\077\u0120\100\073\104\uff8d\105" +
    "\045\106\062\117\067\120\075\121\042\001\002\000\004" +
    "\060\u0121\001\002\000\010\053\uff91\076\uff91\104\uff91\001" +
    "\002\000\004\020\u0123\001\002\000\004\126\u0124\001\002" +
    "\000\062\004\047\005\037\006\066\007\061\010\044\011" +
    "\052\012\030\013\071\014\035\016\076\021\033\050\053" +
    "\057\056\062\074\063\077\073\046\074\054\075\057\100" +
    "\073\105\045\106\062\117\067\120\075\121\042\001\002" +
    "\000\072\004\047\005\037\006\066\007\061\010\044\011" +
    "\052\012\030\013\071\014\035\016\076\021\033\050\053" +
    "\053\uff8c\057\056\062\074\063\077\073\046\074\054\075" +
    "\057\076\uff8c\077\u0126\100\073\104\uff8c\105\045\106\062" +
    "\117\067\120\075\121\042\001\002\000\004\060\u0127\001" +
    "\002\000\010\053\uff90\076\uff90\104\uff90\001\002\000\070" +
    "\004\047\005\037\006\066\007\061\010\044\011\052\012" +
    "\030\013\071\014\035\016\076\021\033\050\053\053\uff94" +
    "\057\056\062\074\063\077\073\046\074\054\075\057\076" +
    "\uff94\100\073\104\uff94\105\045\106\062\117\067\120\075" +
    "\121\042\001\002\000\072\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\053\uff8e\057\056\062\074\063\077\073" +
    "\046\074\054\075\057\076\uff8e\077\u012a\100\073\104\uff8e" +
    "\105\045\106\062\117\067\120\075\121\042\001\002\000" +
    "\004\060\u012b\001\002\000\010\053\uff92\076\uff92\104\uff92" +
    "\001\002\000\062\004\047\005\037\006\066\007\061\010" +
    "\044\011\052\012\030\013\071\014\035\016\076\021\033" +
    "\050\053\057\056\062\074\063\077\073\046\074\054\075" +
    "\057\100\073\105\045\106\062\117\067\120\075\121\042" +
    "\001\002\000\072\004\047\005\037\006\066\007\061\010" +
    "\044\011\052\012\030\013\071\014\035\016\076\021\033" +
    "\050\053\053\uff8a\057\056\062\074\063\077\073\046\074" +
    "\054\075\057\076\uff8a\077\u012e\100\073\104\uff8a\105\045" +
    "\106\062\117\067\120\075\121\042\001\002\000\004\060" +
    "\u012f\001\002\000\010\053\uff89\076\uff89\104\uff89\001\002" +
    "\000\004\052\u0131\001\002\000\006\076\363\104\362\001" +
    "\002\000\010\053\u0133\076\367\104\366\001\002\000\072" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\016\uff97\021\uff97\050\uff97\053\uff97" +
    "\057\uff97\062\uff97\063\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\100\uff97\104\uff97\105\uff97\106\uff97\117\uff97" +
    "\120\uff97\121\uff97\001\002\000\004\052\u0135\001\002\000" +
    "\006\076\363\104\362\001\002\000\010\053\u0137\076\367" +
    "\104\366\001\002\000\072\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\021\uff95\050\uff95\053\uff95\057\uff95\062\uff95\063\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\104\uff95" +
    "\105\uff95\106\uff95\117\uff95\120\uff95\121\uff95\001\002\000" +
    "\040\017\142\020\u013a\024\143\025\147\026\134\027\137" +
    "\050\140\051\136\060\146\061\135\062\144\063\145\111" +
    "\150\112\141\126\133\001\002\000\034\017\160\024\161" +
    "\025\165\026\152\027\155\051\154\060\163\061\153\062" +
    "\162\063\164\111\166\112\u013f\126\151\001\002\000\036" +
    "\017\142\024\143\025\147\026\134\027\137\050\140\051" +
    "\136\060\146\061\135\062\144\063\145\111\150\112\141" +
    "\126\133\001\002\000\036\017\160\020\u013c\024\161\025" +
    "\165\026\152\027\155\051\154\060\163\061\153\062\162" +
    "\063\164\111\166\112\157\126\151\001\002\000\004\051" +
    "\u013d\001\002\000\004\060\u013e\001\002\000\072\004\uff65" +
    "\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013" +
    "\uff65\014\uff65\016\uff65\021\uff65\050\uff65\053\uff65\057\uff65" +
    "\062\uff65\063\uff65\073\uff65\074\uff65\075\uff65\076\uff65\077" +
    "\uff65\100\uff65\104\uff65\105\uff65\106\uff65\117\uff65\120\uff65" +
    "\121\uff65\001\002\000\036\017\uff51\020\u0140\024\uff51\025" +
    "\uff51\026\uff51\027\uff51\051\uff51\060\uff51\061\uff51\062\uff51" +
    "\063\uff51\111\uff51\112\uff51\126\uff51\001\002\000\036\017" +
    "\142\024\143\025\147\026\134\027\137\050\140\051\136" +
    "\060\146\061\135\062\144\063\145\111\150\112\141\126" +
    "\133\001\002\000\036\017\160\020\u0142\024\161\025\165" +
    "\026\152\027\155\051\154\060\163\061\153\062\162\063" +
    "\164\111\166\112\157\126\151\001\002\000\004\051\u0143" +
    "\001\002\000\004\060\u0144\001\002\000\072\004\uff64\005" +
    "\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64" +
    "\014\uff64\016\uff64\021\uff64\050\uff64\053\uff64\057\uff64\062" +
    "\uff64\063\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64" +
    "\100\uff64\104\uff64\105\uff64\106\uff64\117\uff64\120\uff64\121" +
    "\uff64\001\002\000\004\062\u0152\001\002\000\012\023\u014c" +
    "\031\u014b\032\u014d\060\u014a\001\002\000\004\062\u0148\001" +
    "\002\000\004\060\u0149\001\002\000\074\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\016\uffcd\021\uffcd\050\uffcd\051\uffcd\053\uffcd\057\uffcd" +
    "\062\uffcd\063\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\104\uffcd\105\uffcd\106\uffcd\117\uffcd\120\uffcd" +
    "\121\uffcd\001\002\000\074\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9" +
    "\021\uffd9\050\uffd9\051\uffd9\053\uffd9\057\uffd9\062\uffd9\063" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\117\uffd9\120\uffd9\121\uffd9\001" +
    "\002\000\004\060\u0151\001\002\000\004\063\u014f\001\002" +
    "\000\004\060\u014e\001\002\000\074\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\021\uffcf\050\uffcf\051\uffcf\053\uffcf\057\uffcf\062" +
    "\uffcf\063\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\104\uffcf\105\uffcf\106\uffcf\117\uffcf\120\uffcf\121" +
    "\uffcf\001\002\000\004\060\u0150\001\002\000\074\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\016\uffd8\021\uffd8\050\uffd8\051\uffd8\053\uffd8" +
    "\057\uffd8\062\uffd8\063\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\104\uffd8\105\uffd8\106\uffd8\117\uffd8" +
    "\120\uffd8\121\uffd8\001\002\000\074\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\021\uffd0\050\uffd0\051\uffd0\053\uffd0\057\uffd0\062" +
    "\uffd0\063\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0" +
    "\100\uffd0\104\uffd0\105\uffd0\106\uffd0\117\uffd0\120\uffd0\121" +
    "\uffd0\001\002\000\004\060\u0153\001\002\000\074\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\016\uffce\021\uffce\050\uffce\051\uffce\053\uffce" +
    "\057\uffce\062\uffce\063\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\104\uffce\105\uffce\106\uffce\117\uffce" +
    "\120\uffce\121\uffce\001\002\000\006\004\u0157\062\u0156\001" +
    "\002\000\004\051\u016b\001\002\000\004\023\u0165\001\002" +
    "\000\004\062\u0158\001\002\000\004\023\u0159\001\002\000" +
    "\004\063\u015a\001\002\000\004\060\u015b\001\002\000\012" +
    "\015\254\062\253\064\250\065\251\001\002\000\016\060" +
    "\u015d\066\304\067\310\070\303\071\305\072\306\001\002" +
    "\000\006\031\u0160\062\u015f\001\002\000\004\051\uffa8\001" +
    "\002\000\006\023\u0163\031\u0162\001\002\000\004\062\u0161" +
    "\001\002\000\004\051\uffa4\001\002\000\004\051\uffa5\001" +
    "\002\000\004\063\u0164\001\002\000\004\051\uffa6\001\002" +
    "\000\004\063\u0166\001\002\000\004\060\u0167\001\002\000" +
    "\012\015\254\062\253\064\250\065\251\001\002\000\016" +
    "\060\u0169\066\304\067\310\070\303\071\305\072\306\001" +
    "\002\000\006\031\u0160\062\u015f\001\002\000\004\051\uffa7" +
    "\001\002\000\004\052\u016c\001\002\000\064\004\047\005" +
    "\037\006\066\007\061\010\044\011\052\012\030\013\071" +
    "\014\035\016\076\021\033\050\053\053\u016d\057\056\062" +
    "\074\063\077\073\046\074\054\075\057\100\073\105\045" +
    "\106\062\117\067\120\075\121\042\001\002\000\072\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\016\uffa9\021\uffa9\050\uffa9\053\uffa9\057" +
    "\uffa9\062\uffa9\063\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\100\uffa9\104\uffa9\105\uffa9\106\uffa9\117\uffa9\120" +
    "\uffa9\121\uffa9\001\002\000\064\004\047\005\037\006\066" +
    "\007\061\010\044\011\052\012\030\013\071\014\035\016" +
    "\076\021\033\050\053\053\u016f\057\056\062\074\063\077" +
    "\073\046\074\054\075\057\100\073\105\045\106\062\117" +
    "\067\120\075\121\042\001\002\000\072\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\016\uffaa\021\uffaa\050\uffaa\053\uffaa\057\uffaa\062\uffaa" +
    "\063\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\117\uffaa\120\uffaa\121\uffaa" +
    "\001\002\000\016\051\u0171\066\304\067\310\070\303\071" +
    "\305\072\306\001\002\000\004\052\u0172\001\002\000\004" +
    "\053\u0173\001\002\000\072\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb" +
    "\021\uffcb\050\uffcb\053\uffcb\057\uffcb\062\uffcb\063\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\104\uffcb" +
    "\105\uffcb\106\uffcb\117\uffcb\120\uffcb\121\uffcb\001\002\000" +
    "\012\015\254\062\253\064\250\065\251\001\002\000\016" +
    "\051\u0176\066\304\067\310\070\303\071\305\072\306\001" +
    "\002\000\004\052\u0177\001\002\000\064\004\047\005\037" +
    "\006\066\007\061\010\044\011\052\012\030\013\071\014" +
    "\035\016\076\021\033\050\053\053\u0178\057\056\062\074" +
    "\063\077\073\046\074\054\075\057\100\073\105\045\106" +
    "\062\117\067\120\075\121\042\001\002\000\072\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\016\uffad\021\uffad\050\uffad\053\uffad\057\uffad" +
    "\062\uffad\063\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\104\uffad\105\uffad\106\uffad\117\uffad\120\uffad" +
    "\121\uffad\001\002\000\064\004\047\005\037\006\066\007" +
    "\061\010\044\011\052\012\030\013\071\014\035\016\076" +
    "\021\033\050\053\053\u017a\057\056\062\074\063\077\073" +
    "\046\074\054\075\057\100\073\105\045\106\062\117\067" +
    "\120\075\121\042\001\002\000\072\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\016\uffae\021\uffae\050\uffae\053\uffae\057\uffae\062\uffae\063" +
    "\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae" +
    "\104\uffae\105\uffae\106\uffae\117\uffae\120\uffae\121\uffae\001" +
    "\002\000\004\060\u0188\001\002\000\036\017\142\024\143" +
    "\025\147\026\134\027\137\050\140\051\136\060\146\061" +
    "\135\062\144\063\145\111\150\112\141\126\133\001\002" +
    "\000\016\060\u0184\066\304\067\310\070\303\071\305\072" +
    "\306\001\002\000\024\033\261\034\264\035\257\036\256" +
    "\037\255\040\263\060\u0183\062\074\063\077\001\002\000" +
    "\036\017\142\024\143\025\147\026\134\027\137\050\140" +
    "\051\136\060\146\061\135\062\144\063\145\111\150\112" +
    "\141\126\133\001\002\000\036\017\160\024\161\025\165" +
    "\026\152\027\155\051\154\060\163\061\153\062\162\063" +
    "\164\110\u0181\111\166\112\157\126\151\001\002\000\004" +
    "\060\u0182\001\002\000\072\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f" +
    "\021\uff9f\050\uff9f\053\uff9f\057\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\104\uff9f" +
    "\105\uff9f\106\uff9f\117\uff9f\120\uff9f\121\uff9f\001\002\000" +
    "\072\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\016\uffa2\021\uffa2\050\uffa2\053" +
    "\uffa2\057\uffa2\062\uffa2\063\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\100\uffa2\104\uffa2\105\uffa2\106\uffa2\117" +
    "\uffa2\120\uffa2\121\uffa2\001\002\000\072\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\016\uff9e\021\uff9e\050\uff9e\053\uff9e\057\uff9e\062\uff9e" +
    "\063\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100" +
    "\uff9e\104\uff9e\105\uff9e\106\uff9e\117\uff9e\120\uff9e\121\uff9e" +
    "\001\002\000\036\017\160\020\u0186\024\161\025\165\026" +
    "\152\027\155\051\154\060\163\061\153\062\162\063\164" +
    "\111\166\112\157\126\151\001\002\000\004\060\u0187\001" +
    "\002\000\072\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\021\uffa0\050" +
    "\uffa0\053\uffa0\057\uffa0\062\uffa0\063\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\117\uffa0\120\uffa0\121\uffa0\001\002\000\072\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\016\uffa1\021\uffa1\050\uffa1\053\uffa1\057\uffa1" +
    "\062\uffa1\063\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\104\uffa1\105\uffa1\106\uffa1\117\uffa1\120\uffa1" +
    "\121\uffa1\001\002\000\074\004\uff7b\005\uff7b\006\uff7b\007" +
    "\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b" +
    "\021\uff7b\042\u019d\050\uff7b\053\uff7b\057\uff7b\062\uff7b\063" +
    "\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b" +
    "\104\uff7b\105\uff7b\106\uff7b\117\uff7b\120\uff7b\121\uff7b\001" +
    "\002\000\012\020\u018c\062\u018e\063\u018b\110\u018f\001\002" +
    "\000\124\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\014\uff6e\016\uff6e\021\uff6e\024\107" +
    "\025\112\026\102\027\106\030\111\042\uff6e\043\103\044" +
    "\104\045\101\046\100\047\105\050\uff6e\053\uff6e\057\uff6e" +
    "\060\u019c\062\uff6e\063\uff6e\073\uff6e\074\uff6e\075\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\104\uff6e\105\uff6e\106\uff6e\111\113" +
    "\117\uff6e\120\uff6e\121\uff6e\001\002\000\040\017\142\020" +
    "\u0198\024\143\025\147\026\134\027\137\050\140\051\136" +
    "\060\146\061\135\062\144\063\145\111\150\112\141\126" +
    "\133\001\002\000\076\004\uff6d\005\uff6d\006\uff6d\007\uff6d" +
    "\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\016\uff6d\021" +
    "\uff6d\042\uff6d\050\uff6d\053\uff6d\057\uff6d\060\u0196\062\uff6d" +
    "\063\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100" +
    "\uff6d\104\uff6d\105\uff6d\106\uff6d\117\uff6d\120\uff6d\121\uff6d" +
    "\001\002\000\124\004\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\014\uff73\016\uff73\021\uff73" +
    "\024\107\025\112\026\102\027\106\030\111\042\uff73\043" +
    "\124\044\104\045\101\046\100\047\105\050\uff73\053\uff73" +
    "\057\uff73\060\u0195\062\uff73\063\uff73\073\uff73\074\uff73\075" +
    "\uff73\076\uff73\077\uff73\100\uff73\104\uff73\105\uff73\106\uff73" +
    "\111\113\117\uff73\120\uff73\121\uff73\001\002\000\040\017" +
    "\142\024\143\025\147\026\134\027\137\050\140\051\136" +
    "\060\146\061\135\062\144\063\145\110\u0191\111\150\112" +
    "\141\126\133\001\002\000\036\017\160\024\161\025\165" +
    "\026\152\027\155\051\154\060\163\061\153\062\162\063" +
    "\164\110\u0193\111\166\112\157\126\151\001\002\000\076" +
    "\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012" +
    "\uff6f\013\uff6f\014\uff6f\016\uff6f\021\uff6f\042\uff6f\050\uff6f" +
    "\053\uff6f\057\uff6f\060\u0192\062\uff6f\063\uff6f\073\uff6f\074" +
    "\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\104\uff6f\105\uff6f" +
    "\106\uff6f\117\uff6f\120\uff6f\121\uff6f\001\002\000\074\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\016\uff76\021\uff76\042\uff76\050\uff76\053" +
    "\uff76\057\uff76\062\uff76\063\uff76\073\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\100\uff76\104\uff76\105\uff76\106\uff76\117" +
    "\uff76\120\uff76\121\uff76\001\002\000\076\004\uff70\005\uff70" +
    "\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014" +
    "\uff70\016\uff70\021\uff70\042\uff70\050\uff70\053\uff70\057\uff70" +
    "\060\u0194\062\uff70\063\uff70\073\uff70\074\uff70\075\uff70\076" +
    "\uff70\077\uff70\100\uff70\104\uff70\105\uff70\106\uff70\117\uff70" +
    "\120\uff70\121\uff70\001\002\000\074\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\016\uff77\021\uff77\042\uff77\050\uff77\053\uff77\057\uff77\062" +
    "\uff77\063\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77" +
    "\100\uff77\104\uff77\105\uff77\106\uff77\117\uff77\120\uff77\121" +
    "\uff77\001\002\000\074\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\021" +
    "\uff7a\042\uff7a\050\uff7a\053\uff7a\057\uff7a\062\uff7a\063\uff7a" +
    "\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\104" +
    "\uff7a\105\uff7a\106\uff7a\117\uff7a\120\uff7a\121\uff7a\001\002" +
    "\000\074\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\013\uff74\014\uff74\016\uff74\021\uff74\042\uff74" +
    "\050\uff74\053\uff74\057\uff74\062\uff74\063\uff74\073\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\104\uff74\105\uff74" +
    "\106\uff74\117\uff74\120\uff74\121\uff74\001\002\000\036\017" +
    "\160\020\u019a\024\161\025\165\026\152\027\155\051\154" +
    "\060\163\061\153\062\162\063\164\111\166\112\157\126" +
    "\151\001\002\000\076\004\uff71\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\016\uff71\021" +
    "\uff71\042\uff71\050\uff71\053\uff71\057\uff71\060\u0199\062\uff71" +
    "\063\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100" +
    "\uff71\104\uff71\105\uff71\106\uff71\117\uff71\120\uff71\121\uff71" +
    "\001\002\000\074\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\016\uff78\021\uff78" +
    "\042\uff78\050\uff78\053\uff78\057\uff78\062\uff78\063\uff78\073" +
    "\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\104\uff78" +
    "\105\uff78\106\uff78\117\uff78\120\uff78\121\uff78\001\002\000" +
    "\076\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\014\uff72\016\uff72\021\uff72\042\uff72\050" +
    "\uff72\053\uff72\057\uff72\060\u019b\062\uff72\063\uff72\073\uff72" +
    "\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72\104\uff72\105" +
    "\uff72\106\uff72\117\uff72\120\uff72\121\uff72\001\002\000\074" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012" +
    "\uff79\013\uff79\014\uff79\016\uff79\021\uff79\042\uff79\050\uff79" +
    "\053\uff79\057\uff79\062\uff79\063\uff79\073\uff79\074\uff79\075" +
    "\uff79\076\uff79\077\uff79\100\uff79\104\uff79\105\uff79\106\uff79" +
    "\117\uff79\120\uff79\121\uff79\001\002\000\074\004\uff75\005" +
    "\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75" +
    "\014\uff75\016\uff75\021\uff75\042\uff75\050\uff75\053\uff75\057" +
    "\uff75\062\uff75\063\uff75\073\uff75\074\uff75\075\uff75\076\uff75" +
    "\077\uff75\100\uff75\104\uff75\105\uff75\106\uff75\117\uff75\120" +
    "\uff75\121\uff75\001\002\000\012\020\u019f\062\u01a1\063\u019e" +
    "\110\u01a2\001\002\000\032\024\107\025\112\026\102\027" +
    "\106\030\111\043\103\044\104\045\101\046\100\047\105" +
    "\060\u01af\111\113\001\002\000\040\017\142\020\u01ab\024" +
    "\143\025\147\026\134\027\137\050\140\051\136\060\146" +
    "\061\135\062\144\063\145\111\150\112\141\126\133\001" +
    "\002\000\004\060\u01a9\001\002\000\032\024\107\025\112" +
    "\026\102\027\106\030\111\043\124\044\104\045\101\046" +
    "\100\047\105\060\u01a8\111\113\001\002\000\040\017\142" +
    "\024\143\025\147\026\134\027\137\050\140\051\136\060" +
    "\146\061\135\062\144\063\145\110\u01a4\111\150\112\141" +
    "\126\133\001\002\000\036\017\160\024\161\025\165\026" +
    "\152\027\155\051\154\060\163\061\153\062\162\063\164" +
    "\110\u01a6\111\166\112\157\126\151\001\002\000\004\060" +
    "\u01a5\001\002\000\074\004\uff68\005\uff68\006\uff68\007\uff68" +
    "\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\016\uff68\021" +
    "\uff68\042\uff68\050\uff68\053\uff68\057\uff68\062\uff68\063\uff68" +
    "\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\104" +
    "\uff68\105\uff68\106\uff68\117\uff68\120\uff68\121\uff68\001\002" +
    "\000\004\060\u01a7\001\002\000\074\004\uff69\005\uff69\006" +
    "\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69" +
    "\016\uff69\021\uff69\042\uff69\050\uff69\053\uff69\057\uff69\062" +
    "\uff69\063\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69" +
    "\100\uff69\104\uff69\105\uff69\106\uff69\117\uff69\120\uff69\121" +
    "\uff69\001\002\000\074\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\016\uff6c\021" +
    "\uff6c\042\uff6c\050\uff6c\053\uff6c\057\uff6c\062\uff6c\063\uff6c" +
    "\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\104" +
    "\uff6c\105\uff6c\106\uff6c\117\uff6c\120\uff6c\121\uff6c\001\002" +
    "\000\074\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\016\uff66\021\uff66\042\uff66" +
    "\050\uff66\053\uff66\057\uff66\062\uff66\063\uff66\073\uff66\074" +
    "\uff66\075\uff66\076\uff66\077\uff66\100\uff66\104\uff66\105\uff66" +
    "\106\uff66\117\uff66\120\uff66\121\uff66\001\002\000\036\017" +
    "\160\020\u01ad\024\161\025\165\026\152\027\155\051\154" +
    "\060\163\061\153\062\162\063\164\111\166\112\157\126" +
    "\151\001\002\000\004\060\u01ac\001\002\000\074\004\uff6a" +
    "\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013" +
    "\uff6a\014\uff6a\016\uff6a\021\uff6a\042\uff6a\050\uff6a\053\uff6a" +
    "\057\uff6a\062\uff6a\063\uff6a\073\uff6a\074\uff6a\075\uff6a\076" +
    "\uff6a\077\uff6a\100\uff6a\104\uff6a\105\uff6a\106\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\001\002\000\004\060\u01ae\001\002\000" +
    "\074\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\016\uff6b\021\uff6b\042\uff6b\050" +
    "\uff6b\053\uff6b\057\uff6b\062\uff6b\063\uff6b\073\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\077\uff6b\100\uff6b\104\uff6b\105\uff6b\106" +
    "\uff6b\117\uff6b\120\uff6b\121\uff6b\001\002\000\074\004\uff67" +
    "\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013" +
    "\uff67\014\uff67\016\uff67\021\uff67\042\uff67\050\uff67\053\uff67" +
    "\057\uff67\062\uff67\063\uff67\073\uff67\074\uff67\075\uff67\076" +
    "\uff67\077\uff67\100\uff67\104\uff67\105\uff67\106\uff67\117\uff67" +
    "\120\uff67\121\uff67\001\002\000\004\002\000\001\002\000" +
    "\012\015\254\062\253\064\250\065\251\001\002\000\016" +
    "\051\u01b3\066\304\067\310\070\303\071\305\072\306\001" +
    "\002\000\004\052\u01b4\001\002\000\064\004\047\005\037" +
    "\006\066\007\061\010\044\011\052\012\030\013\071\014" +
    "\035\016\076\021\033\050\053\053\u01b5\057\056\062\074" +
    "\063\077\073\046\074\054\075\057\100\073\105\045\106" +
    "\062\117\067\120\075\121\042\001\002\000\004\022\u01bc" +
    "\001\002\000\064\004\047\005\037\006\066\007\061\010" +
    "\044\011\052\012\030\013\071\014\035\016\076\021\033" +
    "\050\053\053\u01b7\057\056\062\074\063\077\073\046\074" +
    "\054\075\057\100\073\105\045\106\062\117\067\120\075" +
    "\121\042\001\002\000\074\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc" +
    "\021\uffcc\022\u01b8\050\uffcc\053\uffcc\057\uffcc\062\uffcc\063" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc" +
    "\104\uffcc\105\uffcc\106\uffcc\117\uffcc\120\uffcc\121\uffcc\001" +
    "\002\000\004\052\u01b9\001\002\000\062\004\047\005\037" +
    "\006\066\007\061\010\044\011\052\012\030\013\071\014" +
    "\035\016\076\021\033\050\053\057\056\062\074\063\077" +
    "\073\046\074\054\075\057\100\073\105\045\106\062\117" +
    "\067\120\075\121\042\001\002\000\064\004\047\005\037" +
    "\006\066\007\061\010\044\011\052\012\030\013\071\014" +
    "\035\016\076\021\033\050\053\053\u01bb\057\056\062\074" +
    "\063\077\073\046\074\054\075\057\100\073\105\045\106" +
    "\062\117\067\120\075\121\042\001\002\000\072\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\016\uffb0\021\uffb0\050\uffb0\053\uffb0\057\uffb0" +
    "\062\uffb0\063\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\104\uffb0\105\uffb0\106\uffb0\117\uffb0\120\uffb0" +
    "\121\uffb0\001\002\000\004\052\u01bd\001\002\000\004\053" +
    "\u01be\001\002\000\072\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\021" +
    "\uffaf\050\uffaf\053\uffaf\057\uffaf\062\uffaf\063\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\117\uffaf\120\uffaf\121\uffaf\001\002\000\004" +
    "\051\u01c0\001\002\000\004\052\u01c1\001\002\000\064\004" +
    "\047\005\037\006\066\007\061\010\044\011\052\012\030" +
    "\013\071\014\035\016\076\021\033\050\053\053\u01c2\057" +
    "\056\062\074\063\077\073\046\074\054\075\057\100\073" +
    "\105\045\106\062\117\067\120\075\121\042\001\002\000" +
    "\004\002\ufffe\001\002\000\064\004\047\005\037\006\066" +
    "\007\061\010\044\011\052\012\030\013\071\014\035\016" +
    "\076\021\033\050\053\053\u01c4\057\056\062\074\063\077" +
    "\073\046\074\054\075\057\100\073\105\045\106\062\117" +
    "\067\120\075\121\042\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\006\050\u01c8\063\u01c7\001" +
    "\002\000\004\060\u01cf\001\002\000\006\062\u01ca\063\077" +
    "\001\002\000\004\051\u01cd\001\002\000\032\024\107\025" +
    "\112\026\102\027\106\030\111\043\124\044\104\045\101" +
    "\046\100\047\105\051\u01cb\111\113\001\002\000\014\004" +
    "\010\056\007\113\011\114\004\122\005\001\002\000\004" +
    "\002\ufffa\001\002\000\014\004\010\056\007\113\011\114" +
    "\004\122\005\001\002\000\004\002\ufff9\001\002\000\014" +
    "\004\010\056\007\113\011\114\004\122\005\001\002\000" +
    "\004\002\ufff8\001\002\000\004\116\u01d2\001\002\000\004" +
    "\060\u01d3\001\002\000\014\004\010\056\007\113\011\114" +
    "\004\122\005\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\006\002\011\020\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\011\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\011\020\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\037\004\064\006\050\007\026\010\071\011\042" +
    "\012\040\016\033\017\035\021\047\022\063\024\057\025" +
    "\067\027\062\030\031\034\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\210\006\204\007" +
    "\174\010\212\011\202\012\201\016\177\017\200\021\203" +
    "\022\207\024\205\025\211\027\206\030\176\034\054\001" +
    "\001\000\002\001\001\000\004\035\u0188\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u016f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\170\001\001\000\004\026\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\173\004\064\006\050\007\026\010\071\011" +
    "\042\012\040\016\033\017\035\021\047\022\063\024\057" +
    "\025\067\027\062\030\031\034\054\001\001\000\040\004" +
    "\210\006\204\007\174\010\212\011\202\012\201\016\177" +
    "\017\200\021\203\022\207\024\205\025\211\027\206\030" +
    "\176\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\215\004\064\006\050\007" +
    "\026\010\071\011\042\012\040\016\033\017\035\021\047" +
    "\022\063\024\057\025\067\027\062\030\031\034\054\001" +
    "\001\000\040\004\210\006\204\007\174\010\212\011\202" +
    "\012\201\016\177\017\200\021\203\022\207\024\205\025" +
    "\211\027\206\030\176\034\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\243\004\064\006\050\007\026\010\071\011\042\012" +
    "\040\016\033\017\035\021\047\022\063\024\057\025\067" +
    "\027\062\030\031\034\054\001\001\000\002\001\001\000" +
    "\040\004\210\006\204\007\174\010\212\011\202\012\201" +
    "\016\177\017\200\021\203\022\207\024\205\025\211\027" +
    "\206\030\176\034\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\306\001\001\000\006\017\257" +
    "\032\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\316\032\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\340\001\001\000\004\031\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\354\034\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\376\004\064\006\050" +
    "\007\026\010\071\011\042\012\040\016\033\017\035\021" +
    "\047\022\063\024\057\025\067\027\062\030\031\034\054" +
    "\001\001\000\040\004\210\006\204\007\174\010\212\011" +
    "\202\012\201\016\177\017\200\021\203\022\207\024\205" +
    "\025\211\027\206\030\176\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u0102\004\064\006\050" +
    "\007\026\010\071\011\042\012\040\016\033\017\035\021" +
    "\047\022\063\024\057\025\067\027\062\030\031\034\054" +
    "\001\001\000\040\004\210\006\204\007\174\010\212\011" +
    "\202\012\201\016\177\017\200\021\203\022\207\024\205" +
    "\025\211\027\206\030\176\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\u0108\004\064\006\050\007\026\010\071\011" +
    "\042\012\040\016\033\017\035\021\047\022\063\024\057" +
    "\025\067\027\062\030\031\034\054\001\001\000\040\004" +
    "\210\006\204\007\174\010\212\011\202\012\201\016\177" +
    "\017\200\021\203\022\207\024\205\025\211\027\206\030" +
    "\176\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\u010c\004\064\006\050\007\026\010\071\011" +
    "\042\012\040\016\033\017\035\021\047\022\063\024\057" +
    "\025\067\027\062\030\031\034\054\001\001\000\040\004" +
    "\210\006\204\007\174\010\212\011\202\012\201\016\177" +
    "\017\200\021\203\022\207\024\205\025\211\027\206\030" +
    "\176\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\u0110\004\064\006\050\007\026\010\071\011" +
    "\042\012\040\016\033\017\035\021\047\022\063\024\057" +
    "\025\067\027\062\030\031\034\054\001\001\000\040\004" +
    "\210\006\204\007\174\010\212\011\202\012\201\016\177" +
    "\017\200\021\203\022\207\024\205\025\211\027\206\030" +
    "\176\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u011a\004\064\006\050\007\026\010\071\011\042\012" +
    "\040\016\033\017\035\021\047\022\063\024\057\025\067" +
    "\027\062\030\031\034\054\001\001\000\040\004\210\006" +
    "\204\007\174\010\212\011\202\012\201\016\177\017\200" +
    "\021\203\022\207\024\205\025\211\027\206\030\176\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u011e\004\064\006\050\007\026\010\071\011\042\012" +
    "\040\016\033\017\035\021\047\022\063\024\057\025\067" +
    "\027\062\030\031\034\054\001\001\000\040\004\210\006" +
    "\204\007\174\010\212\011\202\012\201\016\177\017\200" +
    "\021\203\022\207\024\205\025\211\027\206\030\176\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u0124\004\064\006" +
    "\050\007\026\010\071\011\042\012\040\016\033\017\035" +
    "\021\047\022\063\024\057\025\067\027\062\030\031\034" +
    "\054\001\001\000\040\004\210\006\204\007\174\010\212" +
    "\011\202\012\201\016\177\017\200\021\203\022\207\024" +
    "\205\025\211\027\206\030\176\034\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u0128\004\064\006" +
    "\050\007\026\010\071\011\042\012\040\016\033\017\035" +
    "\021\047\022\063\024\057\025\067\027\062\030\031\034" +
    "\054\001\001\000\040\004\210\006\204\007\174\010\212" +
    "\011\202\012\201\016\177\017\200\021\203\022\207\024" +
    "\205\025\211\027\206\030\176\034\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u012c\004\064\006" +
    "\050\007\026\010\071\011\042\012\040\016\033\017\035" +
    "\021\047\022\063\024\057\025\067\027\062\030\031\034" +
    "\054\001\001\000\040\004\210\006\204\007\174\010\212" +
    "\011\202\012\201\016\177\017\200\021\203\022\207\024" +
    "\205\025\211\027\206\030\176\034\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0138\001\001\000\002\001\001" +
    "\000\004\026\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u015b\001" +
    "\001\000\004\031\306\001\001\000\004\005\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0167\001\001\000\004\031\306\001\001\000\004\005\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u016d\004\064\006\050\007\026\010\071\011\042\012\040" +
    "\016\033\017\035\021\047\022\063\024\057\025\067\027" +
    "\062\030\031\034\054\001\001\000\002\001\001\000\040" +
    "\004\210\006\204\007\174\010\212\011\202\012\201\016" +
    "\177\017\200\021\203\022\207\024\205\025\211\027\206" +
    "\030\176\034\054\001\001\000\002\001\001\000\004\031" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0174\001\001\000\004\031\306\001" +
    "\001\000\002\001\001\000\042\003\u0178\004\064\006\050" +
    "\007\026\010\071\011\042\012\040\016\033\017\035\021" +
    "\047\022\063\024\057\025\067\027\062\030\031\034\054" +
    "\001\001\000\002\001\001\000\040\004\210\006\204\007" +
    "\174\010\212\011\202\012\201\016\177\017\200\021\203" +
    "\022\207\024\205\025\211\027\206\030\176\034\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u0184" +
    "\001\001\000\004\031\306\001\001\000\006\017\257\032" +
    "\261\001\001\000\004\026\u017f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u018c\001\001\000\004\033\107\001\001\000\004\026\u0196" +
    "\001\001\000\002\001\001\000\004\033\124\001\001\000" +
    "\004\026\u018f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u019f\001\001\000\004" +
    "\033\107\001\001\000\004\026\u01a9\001\001\000\002\001" +
    "\001\000\004\033\124\001\001\000\004\026\u01a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01b1\001\001\000\004\031" +
    "\306\001\001\000\002\001\001\000\042\003\u01b5\004\064" +
    "\006\050\007\026\010\071\011\042\012\040\016\033\017" +
    "\035\021\047\022\063\024\057\025\067\027\062\030\031" +
    "\034\054\001\001\000\002\001\001\000\040\004\210\006" +
    "\204\007\174\010\212\011\202\012\201\016\177\017\200" +
    "\021\203\022\207\024\205\025\211\027\206\030\176\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u01b9\004\064\006\050\007\026\010\071\011\042\012" +
    "\040\016\033\017\035\021\047\022\063\024\057\025\067" +
    "\027\062\030\031\034\054\001\001\000\040\004\210\006" +
    "\204\007\174\010\212\011\202\012\201\016\177\017\200" +
    "\021\203\022\207\024\205\025\211\027\206\030\176\034" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\u01c2\004\064\006\050\007\026\010\071" +
    "\011\042\012\040\016\033\017\035\021\047\022\063\024" +
    "\057\025\067\027\062\030\031\034\054\001\001\000\002" +
    "\001\001\000\040\004\210\006\204\007\174\010\212\011" +
    "\202\012\201\016\177\017\200\021\203\022\207\024\205" +
    "\025\211\027\206\030\176\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u01c8\001\001\000\002\001\001\000\004\033" +
    "\124\001\001\000\006\002\011\020\u01cb\001\001\000\002" +
    "\001\001\000\006\002\011\020\u01cd\001\001\000\002\001" +
    "\001\000\006\002\011\020\u01cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\011\020" +
    "\u01d3\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SIMBOLO_MAT ::= Op_ModIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SIMBOLO_MAT ::= Op_DivIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SIMBOLO_MAT ::= Op_PorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SIMBOLO_MAT ::= Op_MenosIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SIMBOLO_MAT ::= Op_MasIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SIMBOLO_MAT ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SIMBOLO_MAT ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SIMBOLO_MAT ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SIMBOLO_MAT ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SIMBOLO_MAT ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SIMBOLO_MAT ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // T_DATO ::= Void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // T_DATO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // T_DATO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // T_DATO ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // T_DATO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // T_DATO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // T_DATO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T_DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPCOMPARADOR ::= Op_MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPCOMPARADOR ::= Op_MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPCOMPARADOR ::= Op_Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPCOMPARADOR ::= Op_Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPCOMPARADOR ::= Op_NoIgualA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPCOMPARADOR ::= Op_IgualA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCOMPARADOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONECTOR ::= Op_Nor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONECTOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONECTOR ::= Op_Nand 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONECTOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONECTOR ::= Op_Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONECTOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONECTOR ::= Op_Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONECTOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONECTOR ::= Op_And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONECTOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CADENA ::= CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CADENA ::= CADENA Linea CADENA Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CADENA ::= CADENA Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CADENA ::= CADENA Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CADENA ::= CADENA Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CADENA ::= CADENA Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CADENA ::= CADENA Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CADENA ::= CADENA P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CADENA ::= CADENA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CADENA ::= CADENA Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CADENA ::= CADENA DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CADENA ::= CADENA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CADENA ::= CADENA Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CADENA ::= Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CADENA ::= Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CADENA ::= Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CADENA ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CADENA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CADENA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CADENA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CADENA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CADENA ::= P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CADENA ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CADENA ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CADENA ::= DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CADENA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SCANF ::= Scanf Parentesis_a Comillas CADENA Comillas Coma Op_Nand Identificador Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRINTF ::= Printf Parentesis_a CADENA Coma Comillas CADENA Comillas Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRINTF ::= Printf Parentesis_a Comillas CADENA Comillas Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor OPERACION_MAT P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Com_Sencilla Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Com_Sencilla CADENA Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Comillas CADENA Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CADENA_COUT ::= CADENA_COUT Op_MenorMenor Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CADENA_COUT ::= Op_MenorMenor OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CADENA_COUT ::= Op_MenorMenor Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CADENA_COUT ::= Op_MenorMenor Com_Sencilla Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CADENA_COUT ::= Op_MenorMenor Com_Sencilla CADENA Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CADENA_COUT ::= Op_MenorMenor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CADENA_COUT ::= Op_MenorMenor Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CADENA_COUT ::= Op_MenorMenor Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CADENA_COUT ::= Op_MenorMenor OPERACION_MAT P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CADENA_COUT ::= Op_MenorMenor Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CADENA_COUT ::= Op_MenorMenor Com_Sencilla Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CADENA_COUT ::= Op_MenorMenor Com_Sencilla CADENA Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CADENA_COUT ::= Op_MenorMenor Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CADENA_COUT ::= Op_MenorMenor Comillas CADENA Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CADENA_COUT ::= Op_MenorMenor Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COUT ::= Cout CADENA_COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CIN ::= Cin Op_MayorMayor Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE ::= CASE Case Com_Sencilla Identificador Com_Sencilla DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE ::= CASE Case Comillas Identificador Comillas DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE ::= CASE Case Identificador DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE ::= CASE Case Numero DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE ::= CASE Default DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= CASE Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE ::= CASE Case Com_Sencilla Identificador Com_Sencilla DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE ::= CASE Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE ::= CASE Case Identificador DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE ::= CASE Case Identificador DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE ::= CASE Case Numero DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE ::= Default DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE ::= Case Com_Sencilla Identificador Com_Sencilla DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASE ::= Case Identificador DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASE ::= Case Numero DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE ::= Case Com_Sencilla Identificador Com_Sencilla DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE ::= Case Identificador DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASE ::= Case Identificador DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE ::= Case Numero DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SWITCH ::= Switch Parentesis_a DECLARACION Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWITCH ::= Switch Parentesis_a Numero Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TRY_CATCH ::= Try Llave_a SENTENCIA Llave_c Catch Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRY_CATCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION_MAT ::= Numero SIMBOLO_MAT Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION_MAT ::= Identificador Op_MasIgual Com_Sencilla CADENA Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION_MAT ::= Identificador Op_MasIgual Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION_MAT ::= Identificador SIMBOLO_MAT Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_MAT ::= Identificador SIMBOLO_MAT Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_RETORNO ::= Return SENTENCIA_BOOLEANA P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_RETORNO ::= Return Com_Sencilla CADENA Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_RETORNO ::= Return Comillas CADENA Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_RETORNO ::= Return Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_RETORNO ::= Return Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VACIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VACIO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_FOR ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_FOR ::= Identificador Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DO_WHILE ::= Do Llave_a Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Com_Sencilla CADENA Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Com_Sencilla Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Identificador OPCOMPARADOR Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA CONECTOR Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Com_Sencilla CADENA Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Com_Sencilla Com_Sencilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador OPCOMPARADOR Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_DATO Op_decremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_DATO Op_incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_DATO Identificador Op_decremento P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_DATO Identificador Op_incremento P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Boolean Identificador Igual Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Boolean Identificador Igual Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= String Identificador Igual Comillas CADENA Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= String Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= String Identificador Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Char Identificador Igual Com_Sencilla CADENA Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Char Identificador Igual Com_Sencilla Com_Sencilla P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_DATO Identificador Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_DATO Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= TRY_CATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA TRY_CATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABECERA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= Using Namespace Std P_Coma CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= Define Identificador Numero P_Coma CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= Define Identificador Parentesis_a OPERACION_MAT Parentesis_c CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= Define Identificador Parentesis_a Identificador Parentesis_c CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= Include Op_Menor Identificador Punto Identificador Op_Mayor CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= Include Op_Menor Identificador Op_Mayor CABECERA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABECERA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CABECERA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

